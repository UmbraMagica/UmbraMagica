import { useAuth } from "@/hooks/useAuth";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { useToast } from "@/hooks/use-toast";
import { useState } from "react";
import { useLocation } from "wouter";
import { 
  Crown, 
  Users, 
  UsersRound, 
  Circle, 
  MessageCircle,
  Gauge,
  Settings,
  User,
  LogOut,
  Shield,
  Plus,
  Edit,
  ArrowUp,
  Book,
  UserPlus,
  Archive,
  Home,
  Skull,
  AlertTriangle,
  Heart,
  ChevronDown,
  ChevronUp
} from "lucide-react";

interface AdminUser {
  id: number;
  username: string;
  email: string;
  role: string;
  createdAt: string;
  characters: any[];
}

export default function Admin() {
  const { user, logout } = useAuth();
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [, setLocation] = useLocation();
  const [newInviteCode, setNewInviteCode] = useState("");
  const [killCharacterData, setKillCharacterData] = useState<{ id: number; name: string } | null>(null);
  const [deathReason, setDeathReason] = useState("");
  const [showConfirmKill, setShowConfirmKill] = useState(false);
  const [isCemeteryCollapsed, setIsCemeteryCollapsed] = useState(true);
  const [isLiveCharactersCollapsed, setIsLiveCharactersCollapsed] = useState(true);
  const [isAdminActivityCollapsed, setIsAdminActivityCollapsed] = useState(true);
  const [isCharacterRequestsCollapsed, setIsCharacterRequestsCollapsed] = useState(true);
  const [isUserManagementCollapsed, setIsUserManagementCollapsed] = useState(true);
  const [banUserData, setBanUserData] = useState<{ id: number; username: string } | null>(null);
  const [resetPasswordData, setResetPasswordData] = useState<{ id: number; username: string } | null>(null);
  const [showConfirmBan, setShowConfirmBan] = useState(false);
  const [banReason, setBanReason] = useState("");

  const { data: users = [] } = useQuery<AdminUser[]>({
    queryKey: ["/api/users"],
    staleTime: 30000,
  });

  const { data: characterRequests = [] } = useQuery<any[]>({
    queryKey: ["/api/admin/character-requests"],
    staleTime: 30000,
  });

  const { data: adminActivityLog = [] } = useQuery<any[]>({
    queryKey: ["/api/admin/activity-log"],
    staleTime: 30000,
  });

  // Fetch all characters for cemetery management
  const { data: allCharacters = [] } = useQuery<any[]>({
    queryKey: ["/api/characters/all"],
    staleTime: 30000,
  });

  const createInviteCodeMutation = useMutation({
    mutationFn: async (code: string) => {
      const response = await apiRequest("POST", "/api/admin/invite-codes", { code });
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "Úspěch",
        description: "Zvací kód byl vytvořen",
      });
      setNewInviteCode("");
    },
    onError: (error: any) => {
      toast({
        title: "Chyba",
        description: error.message || "Nepodařilo se vytvořit zvací kód",
        variant: "destructive",
      });
    },
  });

  const updateRoleMutation = useMutation({
    mutationFn: async ({ userId, role }: { userId: number; role: string }) => {
      const response = await apiRequest("PATCH", `/api/users/${userId}/role`, { role });
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "Úspěch",
        description: "Role byla aktualizována",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/users"] });
    },
    onError: (error: any) => {
      toast({
        title: "Chyba",
        description: error.message || "Nepodařilo se aktualizovat roli",
        variant: "destructive",
      });
    },
  });

  const approveCharacterRequestMutation = useMutation({
    mutationFn: async ({ requestId, reviewNote }: { requestId: number; reviewNote?: string }) => {
      const response = await apiRequest("POST", `/api/admin/character-requests/${requestId}/approve`, { reviewNote });
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "Úspěch",
        description: "Žádost o postavu byla schválena",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/admin/character-requests"] });
      queryClient.invalidateQueries({ queryKey: ["/api/admin/activity-log"] });
    },
    onError: (error: any) => {
      toast({
        title: "Chyba",
        description: error.message || "Nepodařilo se schválit žádost",
        variant: "destructive",
      });
    },
  });

  const rejectCharacterRequestMutation = useMutation({
    mutationFn: async ({ requestId, reviewNote }: { requestId: number; reviewNote: string }) => {
      const response = await apiRequest("POST", `/api/admin/character-requests/${requestId}/reject`, { reviewNote });
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "Úspěch",
        description: "Žádost o postavu byla zamítnuta",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/admin/character-requests"] });
      queryClient.invalidateQueries({ queryKey: ["/api/admin/activity-log"] });
    },
    onError: (error: any) => {
      toast({
        title: "Chyba",
        description: error.message || "Nepodařilo se zamítnout žádost",
        variant: "destructive",
      });
    },
  });

  const killCharacterMutation = useMutation({
    mutationFn: async ({ characterId, deathReason }: { characterId: number; deathReason: string }) => {
      const response = await apiRequest("POST", `/api/admin/characters/${characterId}/kill`, { deathReason });
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "Úspěch",
        description: "Postava byla označena jako zemřelá",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/characters/all"] });
      queryClient.invalidateQueries({ queryKey: ["/api/cemetery"] });
      queryClient.invalidateQueries({ queryKey: ["/api/admin/activity-log"] });
      setKillCharacterData(null);
      setDeathReason("");
      setShowConfirmKill(false);
    },
    onError: (error: any) => {
      toast({
        title: "Chyba",
        description: error.message || "Nepodařilo se označit postavu jako zemřelou",
        variant: "destructive",
      });
    },
  });

  const resurrectCharacterMutation = useMutation({
    mutationFn: async (characterId: number) => {
      const response = await apiRequest("POST", `/api/characters/${characterId}/revive`);
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "Úspěch",
        description: "Postava byla oživena",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/characters/all"] });
      queryClient.invalidateQueries({ queryKey: ["/api/cemetery"] });
      queryClient.invalidateQueries({ queryKey: ["/api/admin/activity-log"] });
    },
    onError: (error: any) => {
      toast({
        title: "Chyba",
        description: error.message || "Nepodařilo se oživit postavu",
        variant: "destructive",
      });
    },
  });

  const banUserMutation = useMutation({
    mutationFn: async ({ userId, banReason }: { userId: number; banReason: string }) => {
      const response = await apiRequest("POST", `/api/admin/users/${userId}/ban`, { banReason });
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "Úspěch",
        description: "Uživatel byl zabanován",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/users"] });
      queryClient.invalidateQueries({ queryKey: ["/api/admin/activity-log"] });
      setBanUserData(null);
      setBanReason("");
      setShowConfirmBan(false);
    },
    onError: (error: any) => {
      toast({
        title: "Chyba",
        description: error.message || "Nepodařilo se zabanovat uživatele",
        variant: "destructive",
      });
    },
  });

  const resetPasswordMutation = useMutation({
    mutationFn: async (userId: number) => {
      const response = await apiRequest("POST", `/api/admin/users/${userId}/reset-password`);
      return response.json();
    },
    onSuccess: (data) => {
      toast({
        title: "Úspěch",
        description: `Heslo bylo resetováno na: ${data.newPassword}`,
      });
      queryClient.invalidateQueries({ queryKey: ["/api/admin/activity-log"] });
      setResetPasswordData(null);
    },
    onError: (error: any) => {
      toast({
        title: "Chyba",
        description: error.message || "Nepodařilo se resetovat heslo",
        variant: "destructive",
      });
    },
  });

  const handleKillCharacter = (characterId: number, characterName: string) => {
    setKillCharacterData({ id: characterId, name: characterName });
    setDeathReason("");
    setShowConfirmKill(false);
  };

  const handleResurrectCharacter = (characterId: number, characterName: string) => {
    if (confirm(`Opravdu chcete oživit postavu ${characterName}? Tato akce odstraní datum smrti a postava se znovu stane aktivní.`)) {
      resurrectCharacterMutation.mutate(characterId);
    }
  };

  const handleBanUser = (userId: number, username: string) => {
    setBanUserData({ id: userId, username });
    setBanReason("");
    setShowConfirmBan(false);
  };

  const confirmBanUser = () => {
    if (!banUserData || !banReason.trim()) {
      toast({
        title: "Chyba",
        description: "Důvod zákazu je povinný",
        variant: "destructive",
      });
      return;
    }

    if (!showConfirmBan) {
      setShowConfirmBan(true);
      return;
    }

    banUserMutation.mutate({
      userId: banUserData.id,
      banReason: banReason.trim()
    });
  };

  const handleResetPassword = (userId: number, username: string) => {
    if (confirm(`Opravdu chcete resetovat heslo pro uživatele ${username}? Bude vygenerováno nové dočasné heslo.`)) {
      resetPasswordMutation.mutate(userId);
    }
  };

  const confirmKillCharacter = () => {
    if (!killCharacterData || !deathReason.trim()) {
      toast({
        title: "Chyba",
        description: "Důvod smrti je povinný",
        variant: "destructive",
      });
      return;
    }

    if (!showConfirmKill) {
      setShowConfirmKill(true);
      return;
    }

    killCharacterMutation.mutate({
      characterId: killCharacterData.id,
      deathReason: deathReason.trim(),
    });
  };

  const handleLogout = async () => {
    try {
      await logout();
      setLocation('/');
      toast({
        title: "Odhlášení",
        description: "Byli jste úspěšně odhlášeni",
      });
    } catch (error) {
      toast({
        title: "Chyba",
        description: "Nepodařilo se odhlásit",
        variant: "destructive",
      });
    }
  };

  const handleCreateInviteCode = (e: React.FormEvent) => {
    e.preventDefault();
    if (!newInviteCode || newInviteCode.length < 6) {
      toast({
        title: "Chyba",
        description: "Zvací kód musí mít alespoň 6 znaků",
        variant: "destructive",
      });
      return;
    }
    createInviteCodeMutation.mutate(newInviteCode);
  };

  const toggleUserRole = (userId: number, currentRole: string) => {
    const newRole = currentRole === "admin" ? "user" : "admin";
    updateRoleMutation.mutate({ userId, role: newRole });
  };

  const stats = {
    totalUsers: users.length,
    activeCharacters: users.reduce((sum, user) => sum + user.characters.length, 0),
    onlineNow: Math.floor(users.length * 0.3), // Mock online count
    activeChats: 5,
  };

  return (
